-- Definição da categoria inicial do programa
Inicio. Programa ::= "main deus do ceu" BlocoComandos ;

-- Blocos de comandos
Bloco. BlocoComandos ::= "{" [COMANDO] "}" ;

-- Definição da lista de COMANDO
[]. [COMANDO] ::= ;
(:). [COMANDO] ::= COMANDO [COMANDO] ;

-- Comandos gerais
rules COMANDO ::= COMANDO_SIMPLES ";" | COMANDO_COMPOSTO ;

-- Comandos simples (exigem ponto e vírgula)
rules COMANDO_SIMPLES ::= ATRIB | EXP | IMPRIME ;

-- Comandos compostos (não exigem ponto e vírgula)
rules COMANDO_COMPOSTO ::= CONDICIONAL | REPETE ;

-- Declarações e atribuições
Declara.           ATRIB ::= Tipo Identificador "=" EXP ;
Atribui.           ATRIB ::= Identificador "=" EXP ;
AtribuiVetor.      ATRIB ::= AcessoVetor "=" EXP ;

-- Expressões
IncVar.            EXP ::= Identificador "++" ;
IncVetor.          EXP ::= AcessoVetor "++" ;
Valor.             EXP ::= VALOR ;
Operacao.          EXP ::= EXP OpArit EXP ;

-- Estruturas condicionais
Se.                CONDICIONAL ::= "Uai" "(" CondicaoExpressao ")" BlocoComandos ;

-- Laços
ParaTipo.          REPETE ::= "Trem" "(" Tipo Identificador "=" EXP ";" CondicaoExpressao ";" Identificador "++" ")" BlocoComandos ;
Para.              REPETE ::= "Trem" "(" Identificador "=" EXP ";" CondicaoExpressao ";" Identificador "++" ")" BlocoComandos ;

-- Comando Imprime
Imprime.           IMPRIME ::= "Zoia" "(" EXP ")" ;

-- Expressões condicionais
CondicaoExpr.      CondicaoExpressao ::= EXP OpRel EXP ;

-- Operadores relacionais
Maior.             OpRel ::= ">" ;
MaiorIgual.        OpRel ::= ">=" ;
Menor.             OpRel ::= "<" ;
MenorIgual.        OpRel ::= "<=" ;
Igual.             OpRel ::= "==" ;
Diferente.         OpRel ::= "!=" ;

-- Operadores aritméticos
Soma.              OpArit ::= "+" ;
Subtrai.           OpArit ::= "-" ;
Multiplica.        OpArit ::= "*" ;
Divide.            OpArit ::= "/" ;

-- Valores e tipos
ValorIdent.        VALOR ::= Identificador ;
ValorInteiro.      VALOR ::= Inteiro ;
ValorReal.         VALOR ::= Real ;
ValorTexto.        VALOR ::= Texto ;
ValorVetor.        VALOR ::= AcessoVetor ;

TipoInt.           Tipo ::= "inteiro" ;
TipoReal.          Tipo ::= "real" ;
TipoTexto.         Tipo ::= "texto" ;

-- Acesso a vetores e matrizes
AcessoSimples.     AcessoVetor ::= Identificador "[" EXP "]" ;
AcessoMatriz.      AcessoVetor ::= Identificador "[" EXP "][" EXP "]" ;

-- Declaração e inicialização de vetores
DeclaraVetor.      ATRIB ::= Tipo Identificador "[" Inteiro "]" ;
InicializaVetor.   ATRIB ::= Tipo Identificador "[" Inteiro "]" "=" "[" [EXP] "]" ;

-- Declaração e inicialização de matrizes
DeclaraMatriz.     ATRIB ::= Tipo Identificador "[" Inteiro "][" Inteiro "]" ;
InicializaMatriz.  ATRIB ::= Tipo Identificador "[" Inteiro "][" Inteiro "]" "=" "[" LinhasDeMatriz "]" ;

-- Listas aninhadas para matrizes
LinhaSimples.      LinhasDeMatriz ::= LinhaDeMatriz ;
LinhasMultiplas.   LinhasDeMatriz ::= LinhaDeMatriz "," LinhasDeMatriz ;
LinhaUnica.        LinhaDeMatriz ::= "[" [EXP] "]" ;

-- Definição da lista de EXP usando separator nonempty
separator nonempty EXP "," ;

-- Tokens básicos
token Identificador letter (letter | digit | '_')* ;
token Inteiro       digit+ ;
token Real          digit+ '.' digit+ ;
token Texto         '"' ( (char - ["\"\\"]) | '\\' ["\"\\tnrf"] )* '"' ;

-- Comentários
comment "#" ;
comment "/#" "#/" ;