/* File generated by the BNF Converter (bnfc 2.9.5). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.h"

/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2048
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

/* The following are simple heuristics for rendering terminals */
/* You may wish to change them */
void renderCC(Char c);
void renderCS(String s);
void indent(void);
void backup(void);
void onEmptyLine(void);
void removeTrailingSpaces(void);
void removeTrailingWhitespace(void);


char *printS(S p);
char *printBlock(Block p);
char *printCMDS(CMDS p);
char *printCMD(CMD p);
char *printATRIB(ATRIB p);
char *printEXP(EXP p);
char *printUAI(UAI p);
char *printOPerL(OPerL p);
char *printOPerA(OPerA p);
char *printOPL(OPL p);
char *printZOIA(ZOIA p);
char *printVEMCA(VEMCA p);
char *printQUANTO(QUANTO p);
char *printPA(PA p);
char *printVALUE(VALUE p);
char *printType(Type p);
char *printTREM(TREM p);
char *printSTRUCT(STRUCT p);
char *printHeteroElements(HeteroElements p);
char *printHeteroElement(HeteroElement p);
char *printFUNC(FUNC p);
char *printVAILA(VAILA p);
char *printLABEL(LABEL p);
char *printConjValues(ConjValues p);
char *printConjValues2D(ConjValues2D p);
char *printPERMA(PERMA p);
char *printAPONTA(APONTA p);

void ppS(S p, int i);
void ppBlock(Block p, int i);
void ppCMDS(CMDS p, int i);
void ppCMD(CMD p, int i);
void ppATRIB(ATRIB p, int i);
void ppEXP(EXP p, int i);
void ppUAI(UAI p, int i);
void ppOPerL(OPerL p, int i);
void ppOPerA(OPerA p, int i);
void ppOPL(OPL p, int i);
void ppZOIA(ZOIA p, int i);
void ppVEMCA(VEMCA p, int i);
void ppQUANTO(QUANTO p, int i);
void ppPA(PA p, int i);
void ppVALUE(VALUE p, int i);
void ppType(Type p, int i);
void ppTREM(TREM p, int i);
void ppSTRUCT(STRUCT p, int i);
void ppHeteroElements(HeteroElements p, int i);
void ppHeteroElement(HeteroElement p, int i);
void ppFUNC(FUNC p, int i);
void ppVAILA(VAILA p, int i);
void ppLABEL(LABEL p, int i);
void ppConjValues(ConjValues p, int i);
void ppConjValues2D(ConjValues2D p, int i);
void ppPERMA(PERMA p, int i);
void ppAPONTA(APONTA p, int i);

char *showS(S p);
char *showBlock(Block p);
char *showCMDS(CMDS p);
char *showCMD(CMD p);
char *showATRIB(ATRIB p);
char *showEXP(EXP p);
char *showUAI(UAI p);
char *showOPerL(OPerL p);
char *showOPerA(OPerA p);
char *showOPL(OPL p);
char *showZOIA(ZOIA p);
char *showVEMCA(VEMCA p);
char *showQUANTO(QUANTO p);
char *showPA(PA p);
char *showVALUE(VALUE p);
char *showType(Type p);
char *showTREM(TREM p);
char *showSTRUCT(STRUCT p);
char *showHeteroElements(HeteroElements p);
char *showHeteroElement(HeteroElement p);
char *showFUNC(FUNC p);
char *showVAILA(VAILA p);
char *showLABEL(LABEL p);
char *showConjValues(ConjValues p);
char *showConjValues2D(ConjValues2D p);
char *showPERMA(PERMA p);
char *showAPONTA(APONTA p);

void shS(S p);
void shBlock(Block p);
void shCMDS(CMDS p);
void shCMD(CMD p);
void shATRIB(ATRIB p);
void shEXP(EXP p);
void shUAI(UAI p);
void shOPerL(OPerL p);
void shOPerA(OPerA p);
void shOPL(OPL p);
void shZOIA(ZOIA p);
void shVEMCA(VEMCA p);
void shQUANTO(QUANTO p);
void shPA(PA p);
void shVALUE(VALUE p);
void shType(Type p);
void shTREM(TREM p);
void shSTRUCT(STRUCT p);
void shHeteroElements(HeteroElements p);
void shHeteroElement(HeteroElement p);
void shFUNC(FUNC p);
void shVAILA(VAILA p);
void shLABEL(LABEL p);
void shConjValues(ConjValues p);
void shConjValues2D(ConjValues2D p);
void shPERMA(PERMA p);
void shAPONTA(APONTA p);

void ppInteger(Integer n, int i);
void ppDouble(Double d, int i);
void ppChar(Char c, int i);
void ppString(String s, int i);
void ppIdent(String s, int i);
void shInteger(Integer n);
void shDouble(Double d);
void shChar(Char c);
void shString(String s);
void shIdent(String s);
void bufEscapeS(const char *s);
void bufEscapeC(const char c);
void bufAppendS(const char *s);
void bufAppendC(const char c);
void bufReset(void);
void resizeBuffer(void);

#endif

